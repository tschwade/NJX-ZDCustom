* >Natural Source Header 000000
* :Mode S
* :CP
* <Natural Source Header
/** Main program generated for
/** adapter <:link ZDCUST/TEST>.
/*
/** :author Thomas Schwade
/** :version Generated by Natural for Ajax.
/*
DEFINE DATA LOCAL
1 ALERTSHORTTEXT (U) DYNAMIC
1 ALERTTYPE (U) DYNAMIC
1 BRAND (U) DYNAMIC
1 NAVBAR (1:*)
  2 ID (U) DYNAMIC
  2 INACTIVE (L)
  2 LEVEL (I4)
  2 METHOD (U) DYNAMIC
  2 OPENED (I4)
  2 TEXT (U) DYNAMIC
*  
1 LINES1 (1:*)
  2 GPROP3 (U) DYNAMIC
  2 GPROP4 (U) DYNAMIC
1 LINES2 (1:*)
  2 GPROP51 (U) DYNAMIC
  2 GPROP61 (U) DYNAMIC
1 LINES3 (1:*)
  2 GPROP52 (U) DYNAMIC
  2 GPROP62 (U) DYNAMIC
1 LINES4 (1:*)
  2 GPROP711 (U) DYNAMIC
  2 GPROP712 (U) DYNAMIC
1 LINES5 (1:*)
  2 GPROP721 (U) DYNAMIC
  2 GPROP722 (U) DYNAMIC
1 LINES6 (1:*)
  2 GPROP8 (U) DYNAMIC
*
1 TEST
  2 ARRAYARRAY (1:*)
    3 SUBARRAYARRAY (1:*)
      4 SUBSUBARRAYARRAY (1:*)
        5 PROP7 (U) DYNAMIC
  2 BOOLEAN (L)
  2 DOUBLE (F8)
  2 FIXED (U32) 
  2 FLOAT (F4)
  2 INTEGER (I4)
  2 LONG (P19)
  2 UNPACKED (N7.3)
  2 OBJECT
    3 PROP1 (U) DYNAMIC
    3 PROP2 (U) DYNAMIC
  2 OBJECTARRAY (1:*)
    3 PROP3 (U) DYNAMIC
    3 PROP4 (U) DYNAMIC
    3 SUBARRAY (1:*)
      4 PROP5 (U) DYNAMIC
      4 PROP6 (U) DYNAMIC
  2 PACKED (P7.3)
  2 SHORT (I2)
  2 STRING (U) DYNAMIC
  2 VALUEARRAY (1:*)
    3 DATA_ (U) DYNAMIC
1 TEST_JSON (U) DYNAMIC
1 TEST_PRETTY (L)
*
1 I (I4)
1 J (I4)
1 K (I4)
1 PROGRAM (A8)
1 ERROR-NR (I4)
END-DEFINE
*
IF *DATA > 0
  INPUT ERROR-NR
  ALERTTYPE := "E"
  ALERTSHORTTEXT := ERROR-NR
END-IF
*
BRAND := "JSON Example"
EXPAND ARRAY NAVBAR TO (1:1)
NAVBAR.LEVEL(1) := 1
NAVBAR.METHOD(1) := "onConvert"
NAVBAR.TEXT(1) := 'Convert JSON to Natural'
*
TEST_PRETTY := TRUE
*
TEST.BOOLEAN := TRUE
TEST.DOUBLE := 3.141592
TEST.FIXED := "Fixed length string"
TEST.FLOAT := 3.141592
TEST.INTEGER := 314
TEST.LONG := 3141592
TEST.PACKED := 3.14
TEST.UNPACKED := 3.14
TEST.SHORT := 3
TEST.STRING := "Dynamic length string"
*
TEST.PROP1 := "prop1"
TEST.PROP2 := "prop2"
*
EXPAND ARRAY TEST.OBJECTARRAY TO (1:2)
EXPAND ARRAY TEST.SUBARRAY TO (*:*,1:3)
FOR I := 1 TO 2
  COMPRESS "prop3" I TO TEST.PROP3(I) LEAVING NO
  COMPRESS "prop4" I TO TEST.PROP4(I) LEAVING NO
  FOR J := 1 TO 3
    COMPRESS "prop5" I J TO TEST.PROP5(I,J) LEAVING NO
    COMPRESS "prop6" I J TO TEST.PROP6(I,J) LEAVING NO
  END-FOR
END-FOR
*
EXPAND ARRAY TEST.ARRAYARRAY TO (1:2)
EXPAND ARRAY TEST.SUBARRAYARRAY TO (*:*,1:2)
EXPAND ARRAY TEST.SUBSUBARRAYARRAY TO (*:*,*:*,1:3)
FOR I := 1 TO 2
  FOR J := 1 TO 2
    FOR K := 1 TO 3
      COMPRESS "prop7" I J K TO TEST.PROP7(I,J,K) LEAVING NO
    END-FOR
  END-FOR
END-FOR
*
EXPAND ARRAY TEST.VALUEARRAY TO (1:4)
FOR I := 1 TO 4
  COMPRESS "data" I TO TEST.DATA_(I) LEAVING NO
END-FOR
*
PERFORM DISPLAYGRIDS
*
PROCESS PAGE USING "TEST"
*
DECIDE ON FIRST *PAGE-EVENT
  VALUE U'nat:page.end', U'nat:browser.end'
    IGNORE
  VALUE U'onConvert'
    PERFORM DISPLAYGRIDS
    PROCESS PAGE UPDATE FULL
  NONE VALUE
    PROCESS PAGE UPDATE
END-DECIDE
*
DEFINE SUBROUTINE DISPLAYGRIDS
EXPAND ARRAY LINES1 TO (1:2)
LINES1.GPROP3(*) := TEST.PROP3(*)
LINES1.GPROP4(*) := TEST.PROP4(*)
EXPAND ARRAY LINES2 TO (1:3)
LINES2.GPROP51(*) := TEST.PROP5(1,*)
LINES2.GPROP61(*) := TEST.PROP6(1,*)
EXPAND ARRAY LINES3 TO (1:3)
LINES3.GPROP52(*) := TEST.PROP5(2,*)
LINES3.GPROP62(*) := TEST.PROP6(2,*)
EXPAND ARRAY LINES4 TO (1:3)
LINES4.GPROP711(*) := TEST.PROP7(1,1,*)
LINES4.GPROP712(*) := TEST.PROP7(1,2,*)
EXPAND ARRAY LINES5 TO (1:3)
LINES5.GPROP721(*) := TEST.PROP7(2,1,*)
LINES5.GPROP722(*) := TEST.PROP7(2,2,*)
EXPAND ARRAY LINES6 TO (1:4)
LINES6.GPROP8(*) := TEST.DATA_(*)
END-SUBROUTINE
*
ON ERROR
  ERROR-NR :=  *ERROR-NR
  PROGRAM := *PROGRAM
  FETCH PROGRAM ERROR-NR
END-ERROR
*
END
